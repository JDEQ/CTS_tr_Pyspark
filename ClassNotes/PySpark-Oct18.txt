
 Agenda (PySpark)
 -----------------
   Spark - Basics & Architecture
   Spark Core API
	-> RDD - Transformations & Actions
	-> Spark shared variables
   Spark Submit command
   Spark SQL 
	-> DataFrame Operations
	-> Integrations - RDBMS & Hive
   Spark Streaming
	-> Structured Streaming


  Materials
  ---------
	=> PDF Presentations
	=> Code Modules 
	=> Class Notes 
        => Github: https://github.com/ykanakaraju/pyspark


  Prerequisites
  -------------
	-> Python
        -> SQL
	 
  Spark
  -----

	Spark is written is Scala programming language

  	Spark is an open-source distributed computing framework for Big-data Analytics

	Spark is an in-memory framework

		in-memory => Spark can persist intermediate results of the tasks in memory and subsequent
                             tasks can directly work on in-memory results. 


	Spark is a unified framework
	
		-> Spark provides a consistent set of APIs for processing different Analytics workloads
		   using the same execution engine and some well define data abstractions. 

		Batch Processing 		=> Spark Core API (RDD API)
		Strcutured Data Processing	=> Spark SQL
		Streaming data processing	=> Spark Streaming (Structured Streaming)
		Predictive analytics		=> Spark MLLib
		Graph Parallel computations	=> Spark GraphX


	Spark is a polyglot
		-> Spark supports Scala, Java, Python and R


	Spark supports multiple cluster managers
		-> Local, Scala Standalone, YARN, Mesos, Kubernetes 

       

   Getting Started with Spark
   --------------------------

     1. Working in your vLab

     2. Setup PySpark dev environement on your personal machine.

	-> Install and setup Anaconda distribution for Python
		download: https://www.anaconda.com/download
		
	-> Install and Setup PySpark ro work with 'Spyder' and 'Jupyter Notebooks'
		
		1. pip install pyspark

		OR

		2. Follow the instructions shared in the attached document.
		<Github>/Pyspark-JupyterNotebooks-Windows-Setup.pdf

      3. Using Databricks community edition (free edition)

		Sign-up: https://www.databricks.com/try-databricks

			=> Fill the details with valid email-address
			=> Next page, click on "Get started with Community Edition" link 
			   (Don't click on 'Continue' button)

		Login: https://community.cloud.databricks.com/login.html



   Spark Architecture
   ------------------
	1. Cluster Manager
		-> Jobs are submitted to CMs
		-> Allocates containers for lauching driver and executors on the cluster. 
		-> Spark supports multiple CMs
			-> local, Standalone, YARN, Mesos, Kubernetes		

	2. Driver
		-> Master process
		-> Runs the SparkContext object
		-> Manages the user code and sends the tasks to the executors as per the code. 

		Deploy Modes:
		1. Client : default, driver runs on the client. 
		2. Cluster : driver runs on one of the nodes on the cluster.

	3. SparkContext
		-> Is an application context
		-> Starting point of execution
		-> Is the link between the driver and tasks running on the executors

	4. Executors
		-> receives the tasks from the Driver
		-> all tasks run the same execution code but on different partitions of the data
		-> the status of tasks are reported to the driver. 


   RDD (Resilient Distributed Dataset)
   -----------------------------------

   -> RDD is a collection of distributed in-memory partitions
	-> Each partition is a collection of objects (of some type)

   -> RDD has two components:
	  Data: Is created when RDD is executed. Is a collection of in-memory partitions	
	  Meta-Data: Lineage DAG


   Creating an RDD
   ---------------

     Three ways to create an RDD:


	1. Create an RDD from some external data source (like text files)

		rddFile = sc.textFile(<dataPath>, n)    n=numPartitions
		rddFile = sc.textFile("E:\\Spark\\wordcount.txt", 4)

		NOTE: To get the partition-count of an RDD:
			 rddFile.getNumPartitions()

	2. to be discussed ....


	3. By applying transformations on existing RDDs

		rddWords = rddFile.flatMap(lambda x: x.split())
		

   RDD Operations
   --------------

	Two types of operations

	1. Transformation
		-> Creates an RDD
		-> Does not cause execution
		-> Returns an RDD

	2. Action
		-> Executes an RDD DAG
		-> Launches Jobs to the cluster
		-> Generates output


   RDD Lineage DAG
   ---------------
   Transformations (data loading commands) create RDD Lineage DAGs
   Maintained by driver
   Represents a logical-plan on how to create RDD partition
   Contains the hierarchy of dependencies all the way from very first RDD.   
	

	rddFile = sc.textFile("E:\\Spark\\wordcount.txt", 4)
	Lineage DAG: (4) rddFile -> sc.textFile

	rddWords = rddFile.flatMap(lambda x: x.split())
	Lineage DAG: (4) rddWords -> rddFile.flatMap -> sc.textFile

	rddPairs = rddWords.map(lambda x: (x, 1))
	Lineage DAG: (4) rddPairs -> rddWords.map -> rddFile.flatMap -> sc.textFile

	rddWc = rddPairs.reduceByKey(lambda x, y: x + y)
	Lineage DAG: (4) rddWc -> rddPairs.reduceByKey -> rddWords.map -> rddFile.flatMap -> sc.textFile

        








































  


