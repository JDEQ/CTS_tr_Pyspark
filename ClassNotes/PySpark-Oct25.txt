
 Agenda (PySpark)
 -----------------
   Spark - Basics & Architecture
   Spark Core API
	-> RDD - Transformations & Actions
	-> Spark shared variables
   Spark Submit command
   Spark SQL 
	-> DataFrame Operations
	-> Integrations - RDBMS & Hive
   Spark Streaming
	-> Structured Streaming


  Materials
  ---------
	=> PDF Presentations
	=> Code Modules 
	=> Class Notes 
        => Github: https://github.com/ykanakaraju/pyspark


  Prerequisites
  -------------
	-> Python
        -> SQL
	 
  Spark
  -----

	Spark is written is Scala programming language

  	Spark is an open-source distributed computing framework for Big-data Analytics

	Spark is an in-memory framework

		in-memory => Spark can persist intermediate results of the tasks in memory and subsequent
                             tasks can directly work on in-memory results. 


	Spark is a unified framework
	
		-> Spark provides a consistent set of APIs for processing different Analytics workloads
		   using the same execution engine and some well define data abstractions. 

		Batch Processing 		=> Spark Core API (RDD API)
		Structured Data Processing	=> Spark SQL
		Streaming data processing	=> Spark Streaming (Structured Streaming)
		Predictive analytics		=> Spark MLLib
		Graph Parallel computations	=> Spark GraphX


	Spark is a polyglot
		-> Spark supports Scala, Java, Python and R


	Spark supports multiple cluster managers
		-> Local, Spark Standalone, YARN, Mesos, Kubernetes 

       

   Getting Started with Spark
   --------------------------

     1. Working in your vLab

     2. Setup PySpark dev environement on your personal machine.

	-> Install and setup Anaconda distribution for Python
		download: https://www.anaconda.com/download
		
	-> Install and Setup PySpark ro work with 'Spyder' and 'Jupyter Notebooks'
		
		1. pip install pyspark

		OR

		2. Follow the instructions shared in the attached document.
		<Github>/Pyspark-JupyterNotebooks-Windows-Setup.pdf

      3. Using Databricks community edition (free edition)

		Sign-up: https://www.databricks.com/try-databricks

			=> Fill the details with valid email-address
			=> Next page, click on "Get started with Community Edition" link 
			   (Don't click on 'Continue' button)

		Login: https://community.cloud.databricks.com/login.html


		To Download a file from databricks:
		-----------------------------------

		/FileStore/<FILEPATH>
		https://community.cloud.databricks.com/files/<FILEPATH>?o=4949609693130439

		Example:
		/FileStore/cars_output/part-00000
		https://community.cloud.databricks.com/files/cars_output/part-00000?o=4949609693130439



   Spark Architecture
   ------------------
	1. Cluster Manager
		-> Jobs are submitted to CMs
		-> Allocates containers for lauching driver and executors on the cluster. 
		-> Spark supports multiple CMs
			-> local, Standalone, YARN, Mesos, Kubernetes		

	2. Driver
		-> Master process
		-> Runs the SparkContext object
		-> Manages the user code and sends the tasks to the executors as per the code. 

		Deploy Modes:
		1. Client : default, driver runs on the client. 
		2. Cluster : driver runs on one of the nodes on the cluster.

	3. SparkContext
		-> Is an application context
		-> Starting point of execution
		-> Is the link between the driver and tasks running on the executors

	4. Executors
		-> receives the tasks from the Driver
		-> all tasks run the same execution code but on different partitions of the data
		-> the status of tasks are reported to the driver. 


   RDD (Resilient Distributed Dataset)
   -----------------------------------

   -> RDD is the fundamental data abstraction of Spark core API

   -> RDD is a collection of distributed in-memory partitions
	-> Each partition is a collection of objects (of some type)

   -> RDD has two components:
	  Data: Is created when RDD is executed. Is a collection of in-memory partitions	
	  Meta-Data: Lineage DAG

   -> RDDs are immutable

   -> RDD are lazily evaluated
	-> Transformations does not cause execution
	-> Only action commands trigger execution	


   Creating an RDD
   ---------------

     Three ways to create an RDD:

	1. Create an RDD from some external data source (like text files)

		rddFile = sc.textFile(<dataPath>, n)    n=numPartitions
		rddFile = sc.textFile("E:\\Spark\\wordcount.txt", 4)

		NOTE: To get the partition-count of an RDD:
			 rddFile.getNumPartitions()

		-> The default number of partitions is determined by the value of 'sc.defaultMinPartitions'
		   'sc.defaultMinPartitions' = 2 if number-of-cores >= 2, else 1

	2. Create an RDD from programmatic data

		rdd1 = sc.parallelize([2,1,3,2,4,5,6,6,5,7,8,9,9], 3)

		-> The default number of partitions is determined by the value of 'sc.defaultParallelism'
		   'sc.defaultParallelism'= number of cores allocated


	3. By applying transformations on existing RDDs

		rddWords = rddFile.flatMap(lambda x: x.split())
		

   RDD Operations
   --------------

    Two types of operations

	1. Transformation
		-> Creates an RDD
		-> Does not cause execution
		-> Returns an RDD

	2. Action
		-> Executes an RDD DAG
		-> Launches Jobs to the cluster
		-> Generates output


   RDD Lineage DAG
   ---------------
   Transformations (data loading commands) create RDD Lineage DAGs
   Maintained by driver
   Represents a logical-plan on how to create RDD partition
   Contains the hierarchy of dependencies all the way from very first RDD.   
	

	rddFile = sc.textFile("E:\\Spark\\wordcount.txt", 4)
	Lineage DAG: (4) rddFile -> sc.textFile

	rddWords = rddFile.flatMap(lambda x: x.split())
	Lineage DAG: (4) rddWords -> rddFile.flatMap -> sc.textFile

	rddPairs = rddWords.map(lambda x: (x, 1))
	Lineage DAG: (4) rddPairs -> rddWords.map -> rddFile.flatMap -> sc.textFile

	rddWc = rddPairs.reduceByKey(lambda x, y: x + y)
	Lineage DAG: (4) rddWc -> rddPairs.reduceByKey -> rddWords.map -> rddFile.flatMap -> sc.textFile

        
  Types of Transformations
  ------------------------

	1. Narrow Transformations
           -> Narrow transformations are those, where the computation of each partition depends ONLY
              on its input partition.
           -> There is no shuffling of data.
           -> Simple and efficient


      	2. Wide Transformations
           -> In wide transformations, the computation of a single partition depends on all/many
              partitions of its input RDD.
           -> Data shuffle across partitions will happen.
           -> Complex and expensive


  RDD Persistence
  ---------------
	rdd1 = sc.textFile(<data-path>, 4)
	rdd2 = rdd1.t2(...) 
	rdd3 = rdd1.t3(...) 
	rdd4 = rdd3.t4(...) 
	rdd5 = rdd3.t5(...) 
	rdd6 = rdd5.t6(...) 
	rdd6.persist( StorageLevel.MEMORY_AND_DISK )  --> instruction to Spark to save rdd6 partitions
	rdd7 = rdd6.t7(...) 

	rdd6.collect()
	Lineage of rdd6: (4) rdd6 -> rdd5.t6 -> rdd3.t5 -> rdd1.t3 -> sc.textFile
		[textFile -> t3 -> t5 -> t6] ==> collect

	rdd7.collect()
	Lineage of rdd6: (4) rdd7 -> rdd6.t7
		[t7] ==> collect

	rdd6.unpersist()


	Storage Levels
        --------------
	MEMORY_ONLY		=> default, Memory Serialized 1x Replicated
	MEMORY_AND_DISK		=> Disk Memory Serialized 1x Replicated
	DISK_ONLY		=> Disk Serialized 1x Replicated
	MEMORY_ONLY_2		=> Memory Serialized 2x Replicated
	MEMORY_AND_DISK_2	=> Disk Memory Serialized 2x Replicated	
	
	Commands
	---------
	rdd1.cache()    	=> in-memory persistence
	rdd1.persist()		=> in-memory persistence
	rdd1.persist(StorageLevel.MEMORY_AND_DISK)

	rdd1.unpersist()


   Spark Executor Memory Structure
   -------------------------------
     
      Let us say we are requesting an executor with 10 GB RAM. 
      The spark job will be allocated executors with 10.3 GB (10GB + 300MB) RAM. 
     
      
      1. Reserved Memory (300 MB)
           -> Spark's internal usage
      
      2. Spark Memory (spark.memory.fraction: 0.6)   => 6 GB (Unified Memory)
          
         2.1  Execution Memory
                 -> Used for RDD partition creationg and transformation
                 -> Can forcibly evict RDD partitions from storage memory if it requires
                    additional upto the quote allocated for it.

         2.2  Storage Memory (spark.memory.storageFraction: 0.5) => 3 GB
                 -> The RDD partitions and broadcast variables are persisted
                    in this memory.

      3. User Memory  => 4 GB
         -> Running non-spark related code execution. 
         -> Related to running python methods, storing python collection.



 RDD Transformations & Actions
 -----------------------------

 1. map			P: U -> V
			Object to object transnformation
			Transforms each input object by applying the function
			input RDD: N objects, output RDD: N object

	rdd1.map(lambda x: x > 8).collect()


 2. filter		P: U -> Boolean
			Only those objects for which the function returns True will be in the output
			input RDD: N objects, output RDD: < N object

	rddFile.filter(lambda x: len(x.split()) > 8).collect()


 3. glom		P: None
			Returns one list object per partition with all the objects of the partition

		rdd1		rdd2 = rdd1.glom()

		P0: 2,3,5,1,4 -> glom -> P0: [2,3,5,1,4]
		P1: 3,6,8,7,9 -> glom -> P1: [3,6,8,7,9]
		P2: 5,0,7,9,3 -> glom -> P2: [5,0,7,9,3]

		rdd1.count() = 15 (int)   rdd2.count() = 3 (list)

		rdd1.glom().map(sum).collect()

  4. flatMap		P: U -> Iterable[V]
			flapMap flattens the iterables produced by the function
			input RDD: N objects, output RDD: > N object
	
		rddWords = rddFile.flatMap(lambda x: x.split())


  5. mapPartitions	P: Iterable[U] -> Iterable[V]
			Partition to partition transformation

		rdd1.mapPartitions(lambda p: [sum(p)]).glom().collect()
		rdd1.mapPartitions(lambda p: map(lambda x: x+10, p)).glom().collect()


  6. mapPartitionsWithIndex	P: Int, Iterable[U] -> Iterable[V]
			Similar to mapPartition but you get partition-index as an additional function parameter	

		rdd1.mapPartitionsWithIndex(lambda i, p: [(i, sum(p))]).glom().collect()
		rdd1.mapPartitionsWithIndex(lambda i, p: map(lambda x: (i, x+10), p)).collect()


  7. distinct		P: None, Optional: numPartitons
			Returns the distinct objects of the RDD.

		rddWords.distinct().collect()
		rddWords.distinct(3).collect()


  8. sortBy		P: U -> V, Optional: ascending (True/False), numPartitions
			Returns an RDD with objects sorted based on function output

		rddWords.sortBy(lambda x: x[-1]).collect()
		rddWords.sortBy(lambda x: x[-1], False).collect()
		rddWords.sortBy(lambda x: x[-1], False, 4).collect()

  Types of RDDs

	Generic RDD : RDD[U]
	Pair RDD : RDD[(K, V)]


  9. mapValues		P: U -> V
			Applied only to Pair RDDs
			Transforms the 'value part' only of the pair RDD by applying the function.
	
		rdd3.mapValues(list).collect()


  10. groupBy		P: U -> V, Optional: numPartitions
			Returns a Pair RDD where:
				key: Each unique value of the function output
				value: ResultIterable with grouped objects.
					

  		wordcountRdd = sc.textFile("E:\\Spark\\wordcount.txt", 4) \
					 .flatMap(lambda x: x.split()) \
					 .groupBy(lambda x: x) \
					 .mapValues(len) \
					 .sortBy(lambda x: x[1], False, 1)

		wordcountRdd.saveAsTextFile("E:\\PySpark\\output\\wordcount")


  11. repartition	P: numPartition
			Is used to increase or decrease the number of partitions
			Performs global shuffle

		rddWords.repartition(3).glom().collect()
		

  12. coalesce		P: numPartition
			Is used only to decrease the number of partitions
			Performs partition merging

		 rddWords.coalesce(2).glom().collect()


     	Recommendations
	----------------
	1. The size of each partition should be between 100MB to 1GB
	   Ideal size is ~128MB if you are using Hadoop HDFS

        2. The number of partitions should be a multiple of number of cores

	3. The number of cores per executor (in case of YARN & K8S) is 5


  13. union, intersection, subtract, cartesian

		-> Operate on two generic RDDs.

		Assume rdd1 has M partitions and rdd2 has N partitions

		command				output
		----------------------------------------------
		rdd1.union(rdd2)		M+N, narrow
		rdd1.intersection(rdd2)		M+N, wide
		rdd1.subtract(rdd2)		M+N, wide
		rdd1.cartesian(rdd2)		M*N, wide


  14. partitionBy	P: numPartition, Optional: partition-function (default: hash)
			Applied only on pair RDDs
			Partitioning happends based on the keys

		transactions = [
			{'name': 'Raju', 'amount': 100, 'city': 'Chennai'},
			{'name': 'Mahesh', 'amount': 15, 'city': 'Hyderabad'},
			{'name': 'Madhu', 'amount': 51, 'city': 'Hyderabad'},
			{'name': 'Revati', 'amount': 200, 'city': 'Chennai'},
			{'name': 'Amrita', 'amount': 75, 'city': 'Pune'},
			{'name': 'Aditya', 'amount': 175, 'city': 'Bangalore'},
			{'name': 'Keertana', 'amount': 105, 'city': 'Pune'},
			{'name': 'Keertana', 'amount': 105, 'city': 'Vijayawada'},
			{'name': 'Amrita', 'amount': 75, 'city': 'Pune'},
			{'name': 'Aditya', 'amount': 175, 'city': 'Bangalore'},
			{'name': 'Keertana', 'amount': 105, 'city': 'Pune'},
			{'name': 'Keertana', 'amount': 105, 'city': 'Vijayawada'}]


		def custom_partitioner(city):
			if (city == "Hyderabad" or city == "Vijayawada"):
				return 0
			elif (city == "Bangalore"):
				return 1
			elif (city == "Chennai"):
				return 2
			else:
				return 3
			
			
		rdd1 = sc.parallelize(transactions, 3) \
				.map(lambda d: (d['city'], d)) \
				.partitionBy(4, custom_partitioner)


  ..ByKey Transformations
  -----------------------
	=> Are wide transformation
	=> Applied to only Pair RDD


  15. sortByKey		P: None, Optional: ascending (True/False), numPartitions
			Sorts the RDD based on the key

		rddPairs.sortByKey().collect()
		rddPairs.sortByKey(False).collect()
		rddPairs.sortByKey(True, 3).collect()


  16. groupByKey	P: None, Optional: numPartitions
			Returns a Pair RDD where
				key: Each unique key of the RDD
				value: grouped values (ResultIterable)

			CAUTION: Avoid 'groupByKey' if possible. 

		wordcountRdd = sc.textFile("E:\\Spark\\wordcount.txt", 4) \
                 	.flatMap(lambda x: x.split()) \
                 	.map(lambda x: (x, 1)) \
                 	.groupByKey() \
                 	.mapValues(sum) \
                 	.sortBy(lambda x: x[1], False, 1)


  17. reduceByKey	P: (U, U) => U, Optional: numPartitions


		wordcountRdd = sc.textFile("E:\\Spark\\wordcount.txt", 4) \
                 	.flatMap(lambda x: x.split()) \
                 	.map(lambda x: (x, 1)) \
                 	.reduceByKey(lambda x, y: x + y) \
                 	.sortBy(lambda x: x[1], False, 1)


  Use-Case
  --------
	dataset: https://github.com/ykanakaraju/pyspark/blob/master/data_git/cars.tsv

	From cars.csv dataset, find out the average-weight of all the models of each make 
	of Amerigin origin cars. 
	-> Arrange the data in the DESCENDING order of average weight
	-> Save the output as a single text file.

	=> Try it yourself


  RDD Actions
  -----------

  1. collect

  2. count

  3. saveAsTextFile

  4. reduce		P: (U, U) => U
			Reduces an entire RDD to one value of the same type by iterativly applying the function
			on each partition in the first stage and then across partitions in the second stage.

		rdd1		

		P0: 2,3,5,1,4 -> reduce -> -11 -> reduce => 30
		P1: 3,6,8,7,9 -> reduce -> -27
		P2: 5,0,7,9,3 -> reduce -> -14

		rdd1.reduce(lambda x, y: x - y)

		rddWc.collect()
		[('hadoop', 25), ('flatmap', 12), ('hdfs', 6), ('sadas', 1), ('das', 6), ('spark', 40), ('asd', 5), ('scala', 28), ('hive', 19), ('transformations', 10), ('d', 1), ('map', 6), ('groupby', 6), ('flume', 6), ('oozie', 6), ('sqoop', 6), ('mapreduce', 6), ('rdd', 43), ('actions', 10)]

		rddWc.reduce(lambda x, y: (x[0] + "," + y[0], x[1] + y[1]) )
		('hadoop,flatmap,hdfs,sadas,das,spark,asd,scala,hive,transformations,d,map,groupby,flume,oozie,sqoop,mapreduce,rdd,actions', 242)



  5. take(n)

		rdd1.take(5)  => returns a list with first 5 objects.

  6. takeOrdered

		rddWords.takeOrdered(20)   => returns a list with first 5 ordered objects.
		rddWords.takeOrdered(20, lambda x: len(x))

  7. takeSample	

	
		rddWords.takeSample(True, 20)   	=> withReplacement = True	
		rddWords.takeSample(True, 20, 53)	=> 53 is a seed here

		rddWords.takeSample(False, 20)   	=> withReplacement = False	
		rddWords.takeSample(False, 20, 53)	=> 53 is a seed here

  8. countByValue

		rdd1.countByValue()

  9. countByKey

  10. foreach  	 => Runs a function on all objects of the RDD, but does not return any value.

  11. saveAsSequenceFile



  Closure
  =======

	In Spark, a closure constitutes all the variables and methods which must be visible for the 
	executor to perform its computations on the RDD. 

	This closure is serialized and a seaparte copy is sent to each executor.

		c = 0   

		def isPrime(n):
			if n is Prime return True
			if n is not Prime return False

		def f1(n):
			global c
			if (isPrime(n)) c += 1
			return n*2

		rdd1 = sc.parallelize( range(1, 4001), 4 )
		rdd2 = rdd1.map( f1 )

		rdd2.collect()

		print(c)	// c = 0 


	Limitation: You can not use local variables (that are part of closure) to impliment global counters.
	Solution: Use "Accumulator" variables to impliment global counters.


  Shared Variables
  ================     

   1. Accumulator Variable
	
	-> Is a shared variable that is not part of the closure
	-> Maintained by driver
	-> All tasks can add to it using 'add' method.	
	-> Only driver can read the value of accumulator. Tasks can only write to it.
	-> Use accumulators to implement global counters. 


		c = sc.accumulator(0)  

		def isPrime(n):
			if n is Prime return True
			if n is not Prime return False

		def f1(n):
			global c
			if (isPrime(n)) c.add(1)
			return n*2

		rdd1 = sc.parallelize( range(1, 4001), 4 )
		rdd2 = rdd1.map( f1 )

		rdd2.collect()

		print(c)	// c = 0 



   2. Broadcast Variable

	-> broadcast variable is a shared variable, hence, not a part of closure
	-> Driver sends a copy of the broadcast variable to every executor
	-> All the task within that executor can read from the one copy (of the executor)
	-> You can convert large immutable collections into broadcast variables. 
	

		d = { 1:a, 2:b, 3:c, 4:d, 5:e, 6:f, 7:g, ..... }   # 100 MB
		bc = sc.broadcast(d)
		
		def f1(n):
			global bc
			return bc.value[n]

		rdd1 =  sc.parallelize( [1,2,3,4,,5,6 ..], 4 )
		rdd2 = rdd1.map( f1 )
		rdd2.collect()           # a,b,c,d,...
		
	

   Spark Submit command
   =====================

    'Spark-submit' command is a single command that is used to submit any spark application (Scala, Java, Python, R)
    to any cluster manager (local, spark syandalone, YARN, Mesos or Kubernetes)
			

	spark-submit [options] <app jar | python file | R file> [app arguments]

	spark-submit --master local E:\PySpark\spark_core\examples\wordcount.py
	spark-submit --master local E:\PySpark\spark_core\examples\wordcount_cmdargs.py sampletext.txt output 1
  


  ====================================
      Spark SQL (pyspark.sql)
  ====================================
   
   -> High level API built on top of Spark Core

   -> Used for structured data processing

	File formats: Parquet (default), ORC, JSON, CSV (delimited text), Text
	 JDBC format: RDBMS, NoSQL
	 Hive format: Hive warehouse

   -> SparkSession

	-> Starting point of execution 
	-> Represents a user-session inside an application

	spark = SparkSession \
    		.builder \
    		.appName("Basic Dataframe Operations") \
    		.config("spark.master", "local[*]") \
    		.getOrCreate()   

   -> DataFrame (DF)

	-> Is the data abstraction used in Spark SQL
	
	-> DF is a collection of distributed in-memory partitions
	-> DF is immutable and lazily evaluated

	-> DF is a collection of 'Row' objects

	-> DF has two components

		Data: Collection of 'Row' objects
		      Row is a collection od 'Column' objects

		Schema: StructType object

			StructType(
			    List(
				StructField(age,LongType,true),
				StructField(gender,StringType,true),
				StructField(name,StringType,true),
				StructField(phone,StringType,true),
				StructField(userid,LongType,true)
			    )
			 )



   Basic steps is a Spark SQL application
   --------------------------------------

   1. Create a DataFrame from some a data source (external or internal)

 		filePath = "E:\\PySpark\\data\\users.json"

		df1 = spark.read.format("json").load(filePath)
		df1 = spark.read.load(filePath, format="json")
		df1 = spark.read.json(filePath)


   2. Perform transformation on the DF using transformation methods or using SQL


	Using transformation methods
        ----------------------------

		df2 = df1.select("userid", "name", "age", "gender", "phone") \
        		.where("age is not null") \
        		.orderBy("gender", "age") \
        		.groupBy("age").count() \
        		.limit(4)

	Using SQL
	---------

		df1.createOrReplaceTempView("users")
		spark.catalog.listTables()

		qry = """select age, count(*) as count
         		from users
         		where age is not null
         		group by age
         		order by age
         		limit 4"""
         
		df3 = spark.sql(qry)
		df3.show()


   3. Save the DF into some structured destination	
	
		outputPath = "E:\\PySpark\\output\\json"

		df3.write.format("json").save(outputPath)
		df3.write.save(outputPath, format="json")
		df3.write.json(outputPath)

 Save Modes
 ----------
    -> Defines what happens when a DF is being written to an existing directory.

	ErrorIfExists (default)
	Ignore
	Append
	Overwrite

	df3.write.mode("overwrite").json(outputPath)
	df3.write.json(outputPath, mode="overwrite")


 LocalTempView & GloblTempView
 -----------------------------

	LocalTempView 
	   -> Local to a specific SparkSession
	   -> Created using createOrReplaceTempView command
		df1.createOrReplaceTempView("users")


	GlobalTempView
	   -> Can be accessed from multiple SparkSessions within the application
	   -> Tied to "global_temp" database
	   -> Created using createOrReplaceGlobalTempView command
		df1.createOrReplaceGlobalTempView("gusers")


 DataFrame Transformations
 -------------------------

  1. select

  2. where / filter

  3. orderBy / sort

  4. groupBy  => returns a "GroupedData" object
		 apply some aggregation method to return a DataFrame

  5. limit
  

 Working with different file formats
 -----------------------------------

   JSON
	read
		df1 = spark.read.format("json").load(inputPath)
		df1 = spark.read.load(inputPath, format="json")
		df1 = spark.read.json(inputPath)

	write
		df3.write.format("json").save(outputPath)
		df3.write.save(outputPath, format="json")
		df3.write.json(outputPath)	

  Parquet (default)
	read
		df1 = spark.read.format("parquet").load(inputPath)
		df1 = spark.read.load(inputPath, format="parquet")
		df1 = spark.read.parquet(inputPath)

	write
		df3.write.format("parquet").save(outputPath)
		df3.write.save(outputPath, format="parquet")
		df3.write.parquet(outputPath)


  ORC
	read
		df1 = spark.read.format("orc").load(inputPath)
		df1 = spark.read.load(inputPath, format="orc")
		df1 = spark.read.orc(inputPath)

	write
		df3.write.format("orc").save(outputPath)
		df3.write.save(outputPath, format="orc")
		df3.write.orc(outputPath)


   CSV (delimited text)

	read
		df1 = spark.read.format("csv").option("header", True).option("inferSchema", True).load(inputPath)
		df1 = spark.read.format("csv").load(inputPath, header=True, inferSchema=True)
		df1 = spark.read.csv(inputPath, header=True, inferSchema=True)
		df1 = spark.read.csv(inputPath, header=True, inferSchema=True, sep="|")

	write
		df3.write.format("csv").save(outputPath, header=True)
		df2.write.csv(outputPath, header=True)
		df2.write.csv(outputPath, header=True, sep="|", mode="overwrite")

   Text
	read
		df1 = spark.read.text(inputPath)
		=> df1 will have one columns called 'value' of 'string' type

	write
		df1.write.text(outputPath)
		=> You can only save a DF with a single text column in 'text' format.



  Create an RDD from DataFrame
  ----------------------------
	rdd1 = df1.rdd
	rdd1.take(5)


  Create a DataFrame from programmatic data
  -----------------------------------------

	listUsers = [(1, "Raju", 5),
		(2, "Ramesh", 15),
		(3, "Rajesh", 18),
		(4, "Raghu", 35),
		(5, "Ramya", 25),
		(6, "Radhika", 35),
		(7, "Ravi", 70)]

	df1 = spark.createDataFrame(listUsers).toDF("id", "name", "age")
	df1 = spark.createDataFrame(listUsers, ["id", "name", "age"])

	df1.show()
	df1.printSchema()







































  


