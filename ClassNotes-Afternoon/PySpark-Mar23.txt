
 Agenda (PySpark)
 -----------------
   Spark - Basics & Architecture
   Spark Core API
	-> RDD - Transformations & Actions
	-> Spark shared variables
   Spark Submit command
   Spark SQL
	-> DataFrame Operations
	-> Integrations - RDBMS & Hive
	-> Spark Optimizations & Tuning
   Spark Streaming
	-> Structured Streaming
	

  Materials
  ---------
	=> PDF Presentations
	=> Code Modules 
	=> Class Notes 
        => Github: https://github.com/ykanakaraju/pyspark

 =====================================================================

   Spark

        -> Spark is a unified in-memory distributed computing framework

	-> Spark is written in SCALA programming language.

	in-memory => the intermediate results can be persisted in the RAM (memory) and subsequent tasks can
	read these results carry the processing forward.

	=> Is a framework to perform bigdata analytics.
	
   
    Spark unified framework
    -----------------------

	Spark provides a consistent set of APIs for processing different analytical work loads
	using the same execution engine.

		Batch processing of unstructured data	: Spark Core API  (low-level API)
		Batch processing of structured data	: Spark SQL
		Streaming analytics			: Spark Streaming
		Predictive analytics			: Spark MLlib
		Graph parallel computations		: Spark GraphX

      Spark is a polyglot
	  -> Scala, Java, Python and R  

      Spark supports multiple cluster managers
	  -> local, spark standalond scheduler, YARN, Mesos, Kubernetes

	  
   Getting started with Spark
   --------------------------

      1. Working in your vLab 

	   -> PySpark shell
	       -> Open a terminal and type 'pyspark'

	   -> Spyder IDE

      2. Setting up your own dev. environment on your personal system. 

	   => Try pip install  (pip install pyspark)
		
		Else..

	   => Follow the instructions given in the shared document. 
		-> Make sure you install Anaconda before using the above document.

      3. Try Databricks community edition (free cloud service)
		
		Signup URL: https://www.databricks.com/try-databricks
		NOTE: Install "Community edition" only 
		
		Login URL: https://community.cloud.databricks.com/login.html
    	

   Spark Architecture
   ------------------
	
	1. Cluster Manager
		-> Jobs are submitted to CMs
		-> Allocates containers for lauching driver and executors on the cluster. 
		-> Spark supports multiple CMs
			-> local, standalone, YARN, Mesos, Kubernetes		

	2. Driver
		-> Master process
		-> Runs the SparkContext object
		-> Manages the user code and sends the tasks to the executors as per the code. 

		Deploy Modes:
		1. Client : default, driver runs on the client. 
		2. Cluster : driver runs on one of the nodes on the cluster.

	3. SparkContext
		-> Is an application context
		-> Starting point of execution
		-> Is the link between the driver and tasks running on the executors

	4. Executors
		-> receives the tasks from the Driver
		-> all tasks runs the same execution code but on different partitions of the data
		-> the status of tasks is reported to the driver.


   Deploy Mode
   -----------
	=> Tells where to run the driver process - on the client (client mode) or on the cluster (cluster mode)


  Resilient Distributed Dataset (RDD)
  -----------------------------------

    => RDD is the fundamental data abstraction in Spark core API.

    => A RDD is a collection of distributed in-memory partitions.
	   -> A partition is a collection of object

    => Components of RDD
		RDD meta-data   : Lineage DAG
		RDD data	: Partitions

    => RDDs are lazily evaluated
	 -> Transformations does not cause executions
	 -> Only action commands trigger execution.

    => RDDs are immutable
     

   Creating RDDs
   -------------
	Three ways:

	1. Create an RDD from some external data source:

		rdd1 = sc.textFile( "E:\\Spark\\wordcount.txt", 4 )

	2. Create an RDD from programmatic data.

		rdd1 = sc.parallelize( range(1,100), 3 )

	3. By applying transformations on exiting RDD

		rdd2 = rdd1.flatMap(lambda x: x.split(" "))   


   RDD Operations
   --------------

	Two operations:

	1. Transformations
		-> Only create RDD linage DAGS
		-> Does not cause execution

	2. Actions
		-> Trigger execution of an RDD
		-> Generates output.



   RDD Lineage DAGs
   ----------------
   RDD Lineage DAG, which is a logical plan, is created when an RDD is created and maintained by the Driver
   RDD Lineage DAG id a heirarchy of dependent RDDs  all the way from the very first RDD.
	

	rdd1 = sc.textFile("E:\\Spark\\wordcount.txt", 4)
	Lineage of rdd1: (4) rdd1 -> sc.textFile


	rdd2 = rdd1.flatMap(lambda x: x.split(" "))
	Lineage of rdd2: (4) rdd2 -> rdd1.flatMap -> sc.textFile

	rdd3 = rdd2.map(lambda x: (x, 1))
	Lineage of rdd3: (4) rdd3  -> rdd2.map -> rdd1.flatMap -> sc.textFile

	rdd4 = rdd3.reduceByKey(lambda x,y: x + y)
	Lineage of rdd4: (4) rdd4 -> rdd3.reduceByKey  -> rdd2.map -> rdd1.flatMap -> sc.textFile


























   



